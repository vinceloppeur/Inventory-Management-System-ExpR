{
	"compilerOptions": {
		/* Visit https://aka.ms/tsconfig to read more about this file */

		/* Projects */

		/* Language and Environment */
		"target": "ES2020" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		"lib": [
			"ES2020"
		] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,

		/* Modules */
		"module": "Node16" /* Specify what module code is generated. */,
		"moduleResolution": "Node16" /* Specify how TypeScript looks up a file from a given module specifier. */,
		"rootDir": "./" /* Specify the root folder within your source files. */,
		"paths": {} /* Specify a set of entries that re-map imports to additional lookup locations. */,
		"rootDirs": [] /* Allow multiple folders to be treated as one when resolving modules. */,
		"types": [
			"node",
			"express"
		] /* Specify type package names to be included without being referenced in a source file. */,
		"resolveJsonModule": false /* Enable importing .json files. */,

		/* JavaScript Support */

		/* Emit */
		"sourceMap": true /* Create source map files for emitted JavaScript files. */,
		"inlineSourceMap": false /* Include sourcemap files inside the emitted JavaScript. */,
		"outDir": "./dist" /* Specify an output folder for all emitted files. */,
		"removeComments": false /* Disable emitting comments. */,
		"noEmit": false /* Disable emitting files from a compilation. */,
		"importHelpers": false /* Allow importing helper functions from tslib once per project, instead of including them per-file. */,
		"importsNotUsedAsValues": "remove" /* Specify emit/checking behavior for imports that are only used for types. */,
		"noEmitOnError": true /* Disable emitting files if any type checking errors are reported. */,

		/* Interop Constraints */
		"isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
		"verbatimModuleSyntax": true /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */,
		"allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

		/* Type Checking */
		"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
		"strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
		"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
		"strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
		"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
		"noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
		"useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
		"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
		"noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
		"noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
		"exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
		"noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
		"noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
		"noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
		"noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
		"noPropertyAccessFromIndexSignature": true /* Enforces using indexed accessors for keys declared using an indexed type. */,

		/* Completeness */
		"skipDefaultLibCheck": true /* Skip type checking .d.ts files that are included with TypeScript. */,
		"skipLibCheck": true /* Skip type checking all .d.ts files. */
	}
}
